AWS PROJECT 9: List S3 Buckets that have public access using Lambda Function
AWS PROJECT 9: List S3 Buckets that have public access using Lambda Function
 

Problem Statement:
 

At work, there is an ongoing need to identify and monitor all S3 buckets with public access. Public access to S3 buckets poses a significant risk to the security and confidentiality of company data. Addressing this issue is crucial to prevent unauthorized access, data breaches, and potential compromises.

 
Solution Approaches:
 

There are two main ways to address this problem:

On-Premise Solution:
Write a Python script using Boto3 to list all S3 buckets with public access.
Send an email notification to the security team.
Schedule the script using a cron job on a Linux machine.
Cloud-Based Solution:
Write a Python script using Boto3 to list all S3 buckets with public access.
Send an email notification to the security team.
Use an AWS Lambda function as the runtime for the script.
Schedule the Lambda function using a CloudWatch event.
 
Chosen Solution:
 

We will proceed with the second (cloud-based) solution.

 
Implementation Plan:
 

Lambda Function:
Develop a Python script that uses Boto3 to list all S3 buckets in the AWS account with public access.
The script will send an email notification to the security team detailing the buckets with public access.
The script will also take action to block public access to those buckets.
Scheduling:
Use an AWS CloudWatch event to schedule the Lambda function to run at regular intervals, such as daily or weekly, depending on the requirements.
 
Documentation:
 

For detailed instructions and the Python script, refer to the project documentation: Link to the project.


###### solution

Run a Python script using a Lambda function
Objective
At the end of this demo, you should be able to run your Python script using a Lambda function. The Python script is used to identify S3 buckets with public access and block them.
Prerequisite
To be able to practice this demo, you must have an account in AWS.
Create and verify your identity email with AWS SES
Follow the steps below to achieve the objective.
Step 1: Create a Lambda function on AWS
To create a lambda function, log in to your AWS management console, click on services, type Lambda in the search bar, and click Lambda.

Once in the AWS Lambda, Click on Functions in the left menu bar
click on Create function to create a new lambda function.

Set the parameters of your lambda function as in the image below, then click on create function button.


You successfully created your lambda function and you will get the image below.

Step 2: Copy our Python script into the Lambda function
First, letâ€™s see the code source of our lambda function. Scroll down, you will see the code in the following image.

Now, we can delete all the content of the lambda_function function, then copy and paste the below Python script as follows:
make sure ur code is indented . at the beginning of the script , look at the sender_email and receiver_email variable and change them by ur by ur verify emails in the same region.

<import json
import boto3
from botocore.exceptions import ClientError

def lambda_handler(event, context):
    SENDER_EMAIL= "<ENTER_YOUR_VERIFIED_SES_EMAIL>"
    RECEIVER_EMAIL= "<ENTER_YOUR_VERIFIED_SES_EMAIL>"
    REGION = "us-east-1"
    
    ses = boto3.client('ses', region_name=REGION)
    s3 = boto3.client('s3', region_name=REGION)

    def get_public_buckets_list():
        public_buckets_list = []
        response = s3.list_buckets()

        for bucket in response['Buckets']:
            bucket_name = bucket['Name']
            #print(f"Checking bucket: {bucket_name}")
            try:
                # Get bucket ACL
                bucket_acl = s3.get_bucket_acl(Bucket=bucket_name)
                #print(f"Bucket ACL for {bucket_name}: {bucket_acl}")
                bucket_grants = bucket_acl['Grants']
                
                # Try to get bucket policy status, handle if the policy doesn't exist
                try:
                    bucket_policy_status = s3.get_bucket_policy_status(Bucket=bucket_name)
                    is_public_policy = bucket_policy_status['PolicyStatus'].get('IsPublic', False)
                except ClientError as e:
                    if e.response['Error']['Code'] == 'NoSuchBucketPolicy':
                        #print(f"No policy exists for bucket {bucket_name}.")
                        is_public_policy = False  # No policy means no public policy by default
                    else:
                        raise
                
                try:
                    response = s3.get_public_access_block(Bucket=bucket_name)
                    public_access_block = response['PublicAccessBlockConfiguration']
                    if not(public_access_block['BlockPublicPolicy']):
                        is_public_policy=True
                        
                    #if public_access_block['BlockPublicPolicy']==False:
                        #is_public_policy:=True
                        
                    #print('public_access_block',bucket_name,public_access_block['BlockPublicPolicy'])
                except ClientError as e:
                    is_public_policy = False  # No policy means no public policy by default
                    

                # Check if ACL allows public access
                for grant in bucket_grants:
                    grant_type = grant['Grantee']['Type']
                    grant_uri = grant['Grantee'].get('URI', '')
                    grant_permission = grant['Permission']
                    
                    #print(f"Grant Type: {grant_type}, URI: {grant_uri}, Permission: {grant_permission}")
                    
                    # Check for public ACLs
                    if (grant_type == 'Group' and 'AllUsers' in grant_uri and 
                        ('READ' in grant_permission.upper() or 'WRITE' in grant_permission.upper())):
                        #print(f"Bucket {bucket_name} has public ACL access")
                        public_buckets_list.append(bucket_name)
                        break  # No need to continue if public ACL is found
                
                # If no public ACL, check if public access is allowed by policy
                if is_public_policy:
                    print(f"Bucket {bucket_name} has a public access policy")
                    public_buckets_list.append(bucket_name)

            except ClientError as e:
                print(f"Error accessing {bucket_name}: {e.response['Error']['Message']}")
                
        return public_buckets_list

    def get_list_of_verified_emails():
        response = ses.list_verified_email_addresses()
        return response['VerifiedEmailAddresses']

    def verify_email(email):
        response = ses.verify_email_identity(EmailAddress=email)
        print(response)
        
    def is_verified_email(sender_email_address, receiver_email_address):
        verified_emails = get_list_of_verified_emails()
        setemail = [sender_email_address, receiver_email_address]
        
        if set(setemail).issubset(set(verified_emails)):
            return True
        else:
            unverified_emails = list(set(setemail) - set(setemail).intersection(set(verified_emails)))
            for email in unverified_emails:
                verify_email(email)
            return False
            
    def send_mail_success(sender, receiver):
        RECIPIENT = [RECEIVER_EMAIL]
        SENDER = SENDER_EMAIL
        SUBJECT = "No Vulnerable bucket"
        BODY_TEXT = f"""
        Hello Team,
        There is no vulnerable buckets.
        """
        CHARSET = "UTF-8"
        
        try:
            response = ses.send_email(
                Destination={'ToAddresses': [receiver, ]},
                Message={
                    'Body': {'Text': {'Charset': CHARSET, 'Data': BODY_TEXT}},
                    'Subject': {'Charset': CHARSET, 'Data': SUBJECT}
                },
                Source=sender,
            )
        except ClientError as e:
            print(f"Failed to send email: {e.response['Error']['Message']}")
        else:
            print(f"Email sent! Message ID: {response['MessageId']}")
    
    
    def send_mail(sender, receiver, buckets):
        RECIPIENT = [RECEIVER_EMAIL]
        SENDER = SENDER_EMAIL
        SUBJECT = "List of buckets that have public access"
        BODY_TEXT = f"""
        Hello Team,
        The following S3 buckets have public access:
        {buckets}
        
        Please review these buckets to ensure security.
        """
        CHARSET = "UTF-8"
        
        try:
            response = ses.send_email(
                Destination={'ToAddresses': [receiver, ]},
                Message={
                    'Body': {'Text': {'Charset': CHARSET, 'Data': BODY_TEXT}},
                    'Subject': {'Charset': CHARSET, 'Data': SUBJECT}
                },
                Source=sender,
            )
        except ClientError as e:
            print(f"Failed to send email: {e.response['Error']['Message']}")
        else:
            print(f"Email sent! Message ID: {response['MessageId']}")

    def block_buckets_public_access(public_buckets):
        for bucket in public_buckets:
            try:
                s3.put_public_access_block(
                    Bucket=bucket,
                    PublicAccessBlockConfiguration={
                        'BlockPublicAcls': True,
                        'IgnorePublicAcls': True,
                        'BlockPublicPolicy': True,
                        'RestrictPublicBuckets': True
                    }
                )
                s3.delete_bucket_policy(Bucket=bucket)
                print(f"The bucket {bucket} is no longer public")
            except ClientError as e:
                print(f"Failed to block public access for {bucket}: {e.response['Error']['Message']}")

    public_buckets = get_public_buckets_list()
    if public_buckets:
        if is_verified_email(SENDER_EMAIL, RECEIVER_EMAIL):
            send_mail(SENDER_EMAIL, RECEIVER_EMAIL, public_buckets)
            block_buckets_public_access(public_buckets)
        else:
            print("Verification email sent, please confirm your identity")
    else:
        send_mail_success(SENDER_EMAIL, RECEIVER_EMAIL)
        print("All buckets are secure!")


This code notifies the security team about vulnerabilities on S3 buckets and blocks public access when it finds them.
- Click on Deploy to save the changes.

## Step 3: Attach a policy to the role of our Lambda function
To attach a policy to the role of our lambda function, follow the steps below:
Click on Configuration
Click on Permissions
Then click on the role name (myLambdaFunction-role-paeskcew in my case)

Once we get to the role page, we have to attach a policy that will allow our Lambda function to use the S3 service.
In the IAM role page, click on Add permissions, then click on Attach Policies.

Search for S3 in the search bar, choose AmazonS3FullAccess

Search for SES in the search bar, choose AmazonSESFullAccess and then click on Add permissions.
# Step 4: Create a Test Event and run our lambda function
To create a Test Event, Click on Test, fill in the form as in the image below and Save it.
- select new test
- put eventt name
- evnt sharring setting = choose the firstline
template = hellow-world

Now, letâ€™s change the timeout for lambda function execution. Follow the steps below to change the timeout:
In the Lambda Function page, Click on Configuration from the menu bar
Click on General Configuration.
Click on Edit
Scroll down to the timeout and change it to 5 min
Then click on Save
Finally, we are ready to execute our script. To run our script, go back to Code, then click on the Test button.

After running the script, You will get the execution result as in the following image. The result in the Function logs shows that dev.awscertif.site, testproject92024 and utrains buckets have been found with public access and were fixed. The email has been successfully sent to the security team lead.

Here is the corpus of the email received by the security team lead.

Letâ€™s re-execute the same lambda function to see if there is any vulnerability. We will get the following results:

Then you will receive the following email:

Step 5: Delete the Lambda function
We successfully ran our Python script in the Lambda function. Now, we can delete the lambda function.
Click on the Lambda service.
Click on Functions
Select our lambda function called myLambdaFunction
Click on Actions, then on Delete.

Then in the dialogue box that shows up, type delete and click on the Delete button.

