

## Setup Kubernetes cluster ubuntu 22.04 servers in Linode
Requirements:
To set up this cluster, we need 3 Ubuntu 22.04 LTS ( you can use Linode (4G memory and 2 CPU) )
Server 1= master
Server 2= node1
Server 3= node2

Login to the 3 servers and run the below commands.
Set servers' Hostname and regular user
Set the hostnames of your servers to easily identify them. As a best practice, create a regular user with administrator access on each server. The name of the user does not matter. Here we just decided to call it kuser

# On the master node: RUN
sudo hostnamectl set-hostname master
exec bash
useradd -m kuser -s /bin/bash -G sudo
# set the password of the user
passwd kuser
# switch to kuser
su - kuser

# On node1: RUN
sudo hostnamectl set-hostname node1
exec bash
useradd -m kuser -s /bin/bash -G sudo
# set the password of the user
passwd kuser
# switch to kuser
su - kuser

# on node2: RUN
sudo hostnamectl set-hostname node2
exec bash
useradd -m kuser -s /bin/bash -G sudo
# set the password of the user
passwd kuser
# switch to kuser
su - kuser


# Setup the Master node (On Master node only)

 # RUN THE BELOW
#!/bin/bash

# update the system
sudo apt update

# Disable swap
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Add kernel parameters
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
# kernel parameters for kubernetes
sudo tee /etc/sysctl.d/kubernetes.conf <<EOT
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOT
# reload the changes
sudo sysctl --system

# Install Containerd runtime
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

sudo apt update
sudo apt install -y containerd.io
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

# END





# Add apt repository for kubernetes
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Install kubectl, kubeadm, kubelet

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

1- Initialize the cluster

sudo kubeadm init --apiserver-advertise-address=45.33.7.113  --apiserver-cert-extra-sans=45.33.7.113 --pod-network-cidr=192.168.0.0/16 --node-name $(hostname) --ignore-preflight-errors Swap

At the end of the process, you will get a command that will be used for nodes to join the cluster. Copy the command and keep it handy

# 2- Set up local kubeconfig
mkdir -p $HOME/.kube


sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config


sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Next, try to run the following kubectl commands to view cluster and node status (The Kubernetes control plane should be running but the status will display NotReady)
kubectl cluster-info
kubectl get nodes

3- Apply Calico CNI network overlay
NB: This should be done as a regular user.
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml

Verify with: (all the pods should be running)
kubectl get pods -n kube-system
kubectl get nodes

# Setup Worker nodes: node1 and node2 only


#!/bin/bash

# update the system
sudo apt-get update

# disable swap
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# set up kernel modules
sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter

# Add kernel parameters for kubernetes
sudo tee /etc/sysctl.d/kubernetes.conf <<EOT
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOT

# reload the changes
sudo sysctl --system

# Install Containerd runtime
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install -y containerd.io
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1      
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

# Add apt repository for kubernetes
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update

# Install kubectl, kubeadm, kubelet
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
# 



Next, make the worker node join the cluster with the kubeadm join command that was created on the master node.
Run the kubeadm join command that was created after the kubeadm init on the master.
Testing
Verify the worker nodes have joined the cluster successfully (Execute the following command on the Master Node):

kubectl get nodes


kubectl get deployments


kubectl get services


Conclusion
With the Kubeadm tool, we can manually set up a Kubernetes cluster in AWS and even on normal servers in the VirtualBox. If you carefully follow the steps you will get the proper installation done.