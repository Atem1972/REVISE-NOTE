



# declarative pipeline
# jenkinsfile

#  go to your jenkins browser and create the job first
         - click on new item
         - inter an item name = anyname
         - click on pipeline
         - description = anything
         - pipeline , definition = select pipeline script from SCM
         - SCM  = SELECT GIT
         - repository = past the repo url from ur github account here
         - if is a private repo then u need to go to jenkins credential and create one in other to use it here on CREDENTIAL
         - BRANCH = main
         - script path = Jenkinsfile1
# Jenkinsfile1     

## # bellow is how to use docker as an agent
      pipeline{

         agent none    # this is in the case where we want each stage of the job to have it own agent as seen below
                      # but we can still declear the agent also here ie agent {docker 'maven:3.3.3}  this will means that we will remove the other agent below and also remove the agent none
     
         stages{
           stage('build){
            agent {docker 'maven:3.3.3'} ### this will run a container execute our job on it and after trash it
                                      here we use but docker 
            steps{
                  sh ' mvn  clean package'
                  sh 'pwd'
                  sh ' cat /etc/os-release'
            }
           }
         }
         stage('test'){
            agent{       docker 'alpine:3.20.3 } # what this agent simply means is looking for environment where to execute the job. 
            steps{                               # jenkins will pull the container from the source and execute the steps we have in the stage
             sh 'pwd'
             sh 'cat /etc/os-release'
            }
         }
      
      
      }


### below is how to use another server elsewhere as agent

 - go to jenkins
 - click on manage jenkins
 - click on NODES
 - click on new node
 - node name = anyname
 - click on permanent agent
 - click crate
 - description = anything
 - number of secutor = 2 or 3,4,5 # this just the number of job to be seen and the rest delete
 - remote root directory = /home/ec2-user/jenkins  # this is the path of our instance but the jenkins at the end is the folder i want it to be created on the instance
 - label = qaserver ## this the name will want the server to be called and we are going to use this label when calling the agent in our jenkinsfile
 - usage = here has different explanation.
           - use this node as much as posible = this means even if on ur jenkins u are usin agent any , jenkins can send the jobs here to execute ur stage
           -only build jobs with label expressions matchind this node  = this means unless we preciece this label on the jenkins before u can run the job here on this node
 - launch methode = this means how we jenkins connect to this agent , sellect launch agents via ssh . bec is in aws
 - host =    past the ip address of the server u want it to connect to
 -  credential = here we need to go to credetion and configure it before we can sellect it here
                     - go to manage jenkins, click on credential
                     - add credential
                     - domain = global credentials 
                     - kind = select ssh username with private key # since we are using but ssh to connect to the instance
                     -scop = global (jenkins, nodes, items, all child items etc)
                     - ID = ANYNAME qassh-cred BUT MAKE SURE TO REMEMEBER IT
                     - DESCRIPTION = repeat the name on id
                     - username = ec2-user  # this is just the user name of ur server , it be ubuntu , alphine
                     - check enter directly
                     - key = click on add , go to the keyname of ur server ending with .pem cat it copy the crypted message and past here 
                     - passphrase = skip this becase the key we just use does not have passphrase
                     - click add
                     ## now u can go back to credential and select it
 - host key verification strategy = select non verifying verification strategy ## because jenkins can not sellect yes when the question is ask about ssh
 - availability = select keep this agent online as much as posible
 - Node properties = check disk space monitoring thresholds
                       - free disk space threshold = remove everything, allow it empty
                       - free disk space warning threshold =remove everything, allow it empty
                       - free temp space  = remove everything, allow it empty
                       - free temp space  warning = remove everything, allow it empty
#           how to see logs of the above qaserver
                       - go to nodes
                       - click on the server
                       - click on log             
 - click on save   
 # make sure u have gone to the qaserver in aws and install git this apply to any other , like if we want to run docker , it need to be install there                   
 
 # jenkinsfile2
                   pipeline{
                        agent {label 'qaserver'}             ## this label is from the agent nodes we configure in jenkins above
                        
                     stages{
                        stage('build') {         # this is just to taste if this job will run but on the qaserver
                           steps{
                              sh 'pwd'
                              sh 'cat /etc/os-release'
                              sh ' touch file1'
                           }
                        }
                        
                     }    
                   }




## how to use jenkins to execute your terraform code
- go to jenkins and create a job, click on new items
- select pipeline
-   description = anything 
- git 
- repository = go to ur github account copy the url of the repo with ur code and past here , make sure it has jenkinsfile
   if is a private repo know that u will need credential , go tho credential in manage jenkins and create ur github credential and put it here
- branch = main
- script path = jenkinsfile4  
- build steps = click on the drop down in ad build step and sellect  ur choice ie excute shell mean u do not need a jenkinsfile , u write ur stage there  


ppipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout Terraform code
                git 'https://github.com/your-repository/terraform-project.git'
            }
        }

        stage('Set AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'your-aws-credentials-id']]) { # this aws credential was generated from jenkin. u can use chat gpt to help and direct u
                    sh 'terraform init -upgrade -no-colour'
                    sh 'terraform plan -no-colour'
                    sh 'terraform apply -auto-approve -no-colour'
                    ## NB I CAN create each sh in his own stage wthout joining to aws credential stage
                }
            }
        }
    }
}


Push the code to ur github and if u have not set ur automatic trigger, then go to jenkins urself and triger it urself by click on Build now